<?xml version="1.0" encoding="utf-8"?>
<mx:VDividedBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				creationPolicy="all"
				implements="weave.api.core.ILinkableObject"
				width="100%" height="100%" xmlns:ui="weave.ui.*" xmlns:local="*">
	<mx:VBox width="100%" height="100%">
		<ui:CodeEditor id="editor"/>
		<mx:HBox>
			<mx:Button label="Load file" click="browse()"/>
			<mx:Button label="Run script" click="validateScript(true)"/>
			<ui:CustomCheckBox id="autorun" selected="true" label="Run script automatically"/>
			<mx:Button label="Save output" click="validateScript(true, true);" enabled="{arrayNotEmpty(files)}"
					   toolTip="Saves the return value from the function to a file."/>
			<ui:HelpComponent>
				var file:FileReference
				function output(result:Object):void
				function curl(url:String):AsyncToken
			</ui:HelpComponent>
		</mx:HBox>
	</mx:VBox>
	
	<mx:TabNavigator id="tabs" width="100%" height="100%" paddingTop="0" selectedIndex="{isPrimitive(output) ? 0 : 1}">
		<mx:VBox label="Text view" width="100%" height="100%">
			<mx:TextArea id="textView" editable="false" width="100%" height="100%" text="{output}" borderStyle="none"/>
		</mx:VBox>
		<mx:Canvas label="Object view">
			<ui:WeaveTree id="treeView" width="100%" height="100%"
						  showRoot="true" borderStyle="none"
						  dataProvider="{newTreeNode(output)}">
				<ui:itemRenderer>
					<fx:Component>
						<local:CustomTreeItemRenderer secondLabelFunction="{outerDocument.getSecondLabel}"
													  secondLabelX="{outerDocument.rightDiv.x}"/>
					</fx:Component>
				</ui:itemRenderer>
			</ui:WeaveTree>
			<mx:HDividedBox width="100%" height="100%">
				<s:Spacer id="leftDiv" width="100%"/>
				<s:Spacer id="rightDiv" width="100%"/>
			</mx:HDividedBox>
		</mx:Canvas>
	</mx:TabNavigator>
	<fx:Script>
		<![CDATA[
			import avmplus.DescribeType;
			import avmplus.getQualifiedClassName;
			
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.core.DynamicState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.reportError;
			import weave.compiler.ProxyObject;
			import weave.compiler.StandardLib;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.core.WeaveXMLDecoder;
			import weave.data.hierarchy.WeaveTreeDescriptorNode;
			import weave.services.addAsyncResponder;
			import weave.ui.WeaveTreeDescriptor;
			import weave.utils.ConsoleEngine;
			import weave.utils.VectorUtils;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				treeView.enableClickToExpand();
				UIUtils.drawInvisiblePolygon(this);
				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, doDragEnter);
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, doDragDrop);
				addEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, doDragExit);
				
				getCallbackCollection(WeaveAPI.ErrorManager).addImmediateCallback(this, handleError);
				
				script.value = DEFAULT_SCRIPT;
				linkBindableProperty(script, editor, 'text', 500);
				script.addImmediateCallback(null, validateScript);
			}
			
			[Bindable] private var output:*;
			
			public const engine:ConsoleEngine = new ConsoleEngine();
			
			public const script:LinkableString = WeaveAPI.globalHashMap.requestObject('script', LinkableString, true);
			public const DEFAULT_SCRIPT:String = "return new WeaveArchive(file.data);";
			public const DEFAULT_SCRIPT_OLD:String = StandardLib.unIndent("\
				import 'weave.flascc.readZip';\n\
				import 'weave.flascc.writeZip';\n\
				\n\
				weaveTrace(ObjectUtil.toString(file));\n\
				\n\
				var zip = readZip(file.data);\n\
				\n\
				var amf = zip['weave-amf/history.amf'];\n\
				\n\
				var result = amf.readObject();\n\
				\n\
				return Compiler.stringify(result, null, 3);\n\
			");
			
			private function runScript(file:FileReference, save:Boolean):*
			{
				output = undefined;
				function lookup(name:String):Object
				{
					if (name == 'file')
						return file;
					if (name == 'curl')
						return curl as Function;
					if (name == 'output')
						return function(result:Object):void {
							saveResult(output = result, save ? file : null);
						};
					
					name = WeaveXMLDecoder.getClassName(name);
					try {
						return getDefinitionByName(name);
					} catch (e:Error) { }
					return null;
				}
				
				engine.context = new ProxyObject(lookup, lookup, null);
				var runCommandResult:Object = engine.runCommand(script.value);
				if (output === undefined)
					output = runCommandResult;
				return output;
			}
			
			private function curl(url:String):AsyncToken
			{
				return WeaveAPI.URLRequestUtils.getURL(null, new URLRequest(url));
			}

			private function doDragEnter(e:NativeDragEvent):void
			{
				if (e.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
					NativeDragManager.acceptDragDrop(this);
			}
			private function doDragDrop(event:NativeDragEvent):void
			{
				files = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				files.forEach(loadFile);
			}
			private function doDragExit(e:NativeDragEvent):void
			{
			}
			
			private function browse():void
			{
				var refs:FileReferenceList = new FileReferenceList();
				refs.addEventListener(Event.SELECT, function(event:Event):void {
					files = refs.fileList;
					files.forEach(loadFile);
				});
				refs.browse();
			}
			
			private function loadFile(file:FileReference, index:int, array:Array):void
			{
				file.addEventListener(ProgressEvent.PROGRESS, function(event:ProgressEvent):void {
					textView.text = lang('Loading {0}/{1} bytes ({2}%)',
						event.bytesLoaded,
						event.bytesTotal,
						StandardLib.roundSignificant(100 * event.bytesLoaded / event.bytesTotal, 3));
				});
				file.addEventListener(Event.COMPLETE, function(event:Event):void {
					for each (var file:FileReference in files)
						if (file && !file.data)
							return;
					if (autorun.selected)
						validateScript();
				});
				file.load();
			}
			
			private function arrayNotEmpty(array:Array):Boolean
			{
				return array && array.length;
			}
			
			[Bindable] private var files:Array = null;
			private function validateScript(userInitiated:Boolean = false, save:Boolean = false):void
			{
				try
				{
					textView.text = '';
					if (userInitiated && !files)
						files = [null];
					if (files && autorun.selected)
					{
						for each (var file:FileReference in files)
						{
							if (file)
								file.data.position = 0;
							var result:* = runScript(file, save);
							if (result != undefined)
								saveResult(result, save ? file : null);
						}
					}
					else
						engine.compiler.compileToObject(script.value);
				}
				catch (e:Error)
				{
					trace(e.getStackTrace());
					textView.text = e.message;
				}
			}
			
			/**
			 * @param result The script result.
			 * @param file The input file. If this parameter is given, the script result will be saved to a new file.
			 */
			private function saveResult(result:Object, file:FileReference):void
			{
				if (result is ResultEvent)
					result = (result as ResultEvent).result;
				if (result is FaultEvent)
					result = (result as FaultEvent).fault;
				if (result is AsyncToken)
				{
					addAsyncResponder(result as AsyncToken, saveResult, saveResult, file);
					return;
				}
				
				if (!file)
				{
					textView.text = String(result);
					return;
				}
				
				var fileName:String;
				if (result is ByteArray)
				{
					fileName = file.name;
				}
				else if (typeof result == 'object')
				{
					var amfBytes:ByteArray = new ByteArray();
					amfBytes.writeObject(result);
					result = amfBytes;
					fileName = file.name + '.amf';
				}
				else
				{
					fileName = file.name + '.txt';
				}
				
				new FileReference().save(result, fileName);
				textView.text = "Saving " + fileName;
			}
			
			private function handleError():void
			{
				textView.text = WeaveAPI.ErrorManager.errors[WeaveAPI.ErrorManager.errors.length - 1];
			}
			
			private const MAX_LABEL_LENGTH:int = 256;
			private function getLabel(node:WeaveTreeDescriptorNode):String
			{
				var value:* = node.data[0];
				var key:* = node.data[1];
				
				var label:String = key;
				if (label && label.length > MAX_LABEL_LENGTH)
					label = String(label).substr(0, MAX_LABEL_LENGTH - 3) + '...';
				
				var className:String = getQualifiedClassName(node.data[0]);
				
				return (label ? label + " : " : "") + className;
			}
			
			private function newTreeNode(value:*, key:String = null, _:* = null):WeaveTreeDescriptorNode
			{
				var hasChildren:Boolean;
				if (value is Array && (value as Array).length == 0)
					hasChildren = false;
				else
					hasChildren = !isPrimitive(value);
				
				return new WeaveTreeDescriptorNode({
					label: getLabel,
					data: [value, key],
					children: hasChildren ? getChildNodes : null,
					dependency: this
				});
			}
			private function isPrimitive(value:*):Boolean
			{
				return !value || typeof value != 'object';
			}
			private function getChildNodes(node:WeaveTreeDescriptorNode):Array
			{
				var value:* = node.data[0];
				var key:* = node.data[1];
				
				if (value is Array)
					return (value as Array).map(newTreeNode);
				
				var keys:Array = VectorUtils.getKeys(value);
				if (!keys.length && getQualifiedClassName(value) != 'Object')
				{
					for each (var list:Array in DescribeType.getInfo(value, DescribeType.ACCESSOR_FLAGS | DescribeType.VARIABLE_FLAGS)['traits'])
						for each (var item:Object in list)
							if (item.access != 'writeonly')
								keys.push(item.uri ? new QName(item.uri, item.name) : item.name);
				}
				keys.sort();
				
				var children:Array = [];
				for each (var childKey:* in keys)
				{
					var childValue:*;
					try {
						childValue = value[childKey];
					} catch (e:Error) {
						childValue = e;
					}
					
					children.push(newTreeNode(childValue, childKey));
				}
				return children;
			}
			public function getSecondLabel(node:WeaveTreeDescriptorNode):String
			{
				var value:* = node.data[0];
				var key:* = node.data[1];
				
				var detail:String = '';
				if (isPrimitive(value))
				{
					detail = value;
				}
				else if (DynamicState.isDynamicState(value))
				{
					detail = (value[DynamicState.CLASS_NAME] as String).split('::').pop();
					if (value[DynamicState.OBJECT_NAME])
						detail += lang(' "{0}"', value[DynamicState.OBJECT_NAME]);
				}
				else if (value is Array)
				{
					detail = "length = " + (value as Array).length;
				}
				
				return detail;
			}
		]]>
	</fx:Script>
</mx:VDividedBox>
