<?xml version="1.0" encoding="utf-8"?>
<mx:VDividedBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				creationComplete="init();"
				width="100%" height="100%" xmlns:ui="weave.ui.*">
	<mx:VBox width="100%" height="100%">
		<ui:CodeEditor id="editor"/>
		<mx:HBox>
			<mx:Button label="Load file" click="browse()"/>
			<mx:Button label="Run script" click="validateScript(true)"/>
			<ui:CustomCheckBox id="autorun" selected="true" label="Run script automatically"/>
			<mx:Button label="Save output" click="validateScript(true, true);" enabled="{arrayNotEmpty(files)}"
					   toolTip="Saves the return value from the function to a file."/>
		</mx:HBox>
	</mx:VBox>
	<s:TextArea id="output" width="100%" height="100%"/>
	<fx:Script>
		<![CDATA[
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.compiler.ProxyObject;
			import weave.compiler.StandardLib;
			import weave.core.LinkableFunction;
			import weave.core.UIUtils;
			import weave.core.WeaveXMLDecoder;
			
			public const script:LinkableFunction = registerLinkableChild(WeaveAPI.globalHashMap, new LinkableFunction(DEFAULT_SCRIPT, false, true, ['file']), validateScript);
			public const DEFAULT_SCRIPT:String = "\
				function (file) {\n\
					import 'mx.utils.ObjectUtil';\n\
					import 'weave.flascc.readZip';\n\
					import 'weave.flascc.writeZip';\n\
					\n\
					weaveTrace(ObjectUtil.toString(file));\n\
					\n\
					var zip = readZip(file.data);\n\
					\n\
					var amf = zip['weave-amf/history.amf'];\n\
					\n\
					var result = amf.readObject();\n\
					\n\
					return ObjectUtil.toString(result);\n\
				}\
			";
			private const classLookup:ProxyObject = new ProxyObject(getClassDef, getClassDef, null);
			private function getClassDef(className:String):Object
			{
				className = WeaveXMLDecoder.getClassName(className);
				try {
					return getDefinitionByName(className);
				} catch (e:Error) { }
				return null;
			}

			private function init():void
			{
				UIUtils.drawInvisiblePolygon(this);
				
				WeaveAPI.globalHashMap;
				
				linkBindableProperty(script, editor, 'text', 500);
				
				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, doDragEnter);
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, doDragDrop);
				addEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, doDragExit);
			}
			private function doDragEnter(e:NativeDragEvent):void
			{
				if (e.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
					NativeDragManager.acceptDragDrop(this);
			}
			private function doDragDrop(event:NativeDragEvent):void
			{
				files = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				files.forEach(loadFile);
			}
			private function doDragExit(e:NativeDragEvent):void
			{
			}
			
			private function browse():void
			{
				var refs:FileReferenceList = new FileReferenceList();
				refs.addEventListener(Event.SELECT, function(event:Event):void {
					files = refs.fileList;
					files.forEach(loadFile);
				});
				refs.browse();
			}
			
			private function loadFile(file:FileReference, index:int, array:Array):void
			{
				file.addEventListener(ProgressEvent.PROGRESS, function(event:ProgressEvent):void {
					output.text = lang('Loading {0}/{1} bytes ({2}%)',
						event.bytesLoaded,
						event.bytesTotal,
						StandardLib.roundSignificant(100 * event.bytesLoaded / event.bytesTotal, 3));
				});
				file.addEventListener(Event.COMPLETE, function(event:Event):void {
					for each (var file:FileReference in files)
						if (!file.data)
							return;
					if (autorun.selected)
						validateScript();
				});
				file.load();
			}
			
			private function arrayNotEmpty(array:Array):Boolean
			{
				return array && array.length;
			}
			
			[Bindable] private var files:Array = null;
			private function validateScript(userInitiated:Boolean = false, save:Boolean = false):void
			{
				try
				{
					output.text = '';
					if (files && (userInitiated || autorun.selected))
					{
						for each (var file:FileReference in files)
						{
							file.data.position = 0;
							var result:* = script.call(classLookup, file);
							if (save)
							{
								var fileName:String;
								if (result is ByteArray)
								{
									fileName = file.name;
								}
								else if (typeof result == 'object')
								{
									var amfBytes:ByteArray = new ByteArray();
									amfBytes.writeObject(result);
									result = amfBytes;
									fileName = file.name + '.amf';
								}
								else
								{
									fileName = file.name + '.txt';
								}
								
								new FileReference().save(result, fileName);
								output.text = "Saving " + fileName;
							}
							else
								output.text = result;
						}
					}
					else
						script.validate();
				}
				catch (e:Error)
				{
					trace(e.getStackTrace());
					output.text = e.message;
				}
			}
		]]>
	</fx:Script>
</mx:VDividedBox>
