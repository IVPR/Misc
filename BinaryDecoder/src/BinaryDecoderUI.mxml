<?xml version="1.0" encoding="utf-8"?>
<mx:VDividedBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				creationComplete="init();"
				width="100%" height="100%" xmlns:ui="weave.ui.*">
	<mx:VBox width="100%" height="100%" >
		<ui:CodeEditor id="editor"/>
		<mx:HBox>
			<mx:Button label="Run script" click="validateScript()"/>
			<ui:CustomCheckBox id="autorun" selected="true" label="Run script automatically"/>
		</mx:HBox>
	</mx:VBox>
	<s:TextArea id="output" width="100%" height="100%"/>
	<fx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.compiler.StandardLib;
			import weave.core.LinkableFunction;
			import weave.core.UIUtils;
			
			public const script:LinkableFunction = registerLinkableChild(WeaveAPI.globalHashMap, new LinkableFunction(DEFAULT_SCRIPT, false, false, ['file']), validateScript);
			public const DEFAULT_SCRIPT:String = "\
				function (file) {\n\
					import 'mx.utils.ObjectUtil';\n\
					\n\
					weaveTrace(ObjectUtil.toString(file));\n\
					\n\
					var data = file.data;\n\
					\n\
					data.position = 0;\n\
					var result = data.readObject();\n\
					\n\
					return ObjectUtil.toString(result);\n\
				}\
			";

			private function init():void
			{
				UIUtils.drawInvisiblePolygon(this);
				
				WeaveAPI.globalHashMap;
				
				linkBindableProperty(script, editor, 'text', 500);
				
				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, doDragEnter);
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, doDragDrop);
				addEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, doDragExit);
			}
			private function doDragEnter(e:NativeDragEvent):void
			{
				NativeDragManager.acceptDragDrop(this);
			}
			private function doDragDrop(event:NativeDragEvent):void
			{
				files = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				files.forEach(loadFile);
			}
			private function doDragExit(e:NativeDragEvent):void
			{
			}
			
			private function loadFile(file:File, index:int, array:Array):void
			{
				var file:File = files[index] as File;
				file.addEventListener(ProgressEvent.PROGRESS, function(event:ProgressEvent):void {
					output.text = lang('Loading {0}/{1} bytes ({2}%)',
						event.bytesLoaded,
						event.bytesTotal,
						StandardLib.roundSignificant(100 * event.bytesLoaded / event.bytesTotal, 3));
				});
				file.addEventListener(Event.COMPLETE, function(event:Event):void {
					for each (var file:File in files)
						if (!file.data)
							return;
					if (autorun.selected)
						validateScript();
				});
				file.load()
			}
			
			private var files:Array = null;
			private function validateScript():void
			{
				try
				{
					output.text = '';
					if (files)
					{
						for each (var file:File in files)
							output.text = script.call(null, file);
					}
					else
						script.validate();
				}
				catch (e:Error)
				{
					output.text = e.message;
				}
			}
		]]>
	</fx:Script>
</mx:VDividedBox>
